{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to CustomProteinSearch # Figure 1: Overview of the CusProSe package functionalities CustomProteinSearch is a python package containing two independent but complementary programs whose overall objective is to help users to search for specific proteins of interest based on their domain composition: IterHMMBuild and ProSeCDA . IterHMMBuild is an iterative search method based on the hmmer program, the aim of which is to provide users with a representative HMM protein profile of interest constructed by an iterative enrichment process starting from a small initial set of related protein sequences. ProSeCDA is a tool that allows to search in a given protein database multiple proteins of interest defined by a user-specified set of domains.","title":"Home"},{"location":"index.html#welcome-to-customproteinsearch","text":"Figure 1: Overview of the CusProSe package functionalities CustomProteinSearch is a python package containing two independent but complementary programs whose overall objective is to help users to search for specific proteins of interest based on their domain composition: IterHMMBuild and ProSeCDA . IterHMMBuild is an iterative search method based on the hmmer program, the aim of which is to provide users with a representative HMM protein profile of interest constructed by an iterative enrichment process starting from a small initial set of related protein sequences. ProSeCDA is a tool that allows to search in a given protein database multiple proteins of interest defined by a user-specified set of domains.","title":"Welcome to CustomProteinSearch"},{"location":"ihb_introduction.html","text":"IterHMMBuild overall procedure # Figure 2: Pipeline overview of IterHMMBuild IterHMMBuild is an iterative search method based on the hmmer program, the aim of which is to provide users with a representative HMM protein profile of interest constructed by an iterative enrichment process starting from a small initial set of related protein sequences. The IterHMMBuild procedure starts building an HMM profile from either a set of related protein sequences or a single query sequence. This initial profile is then used to identify homologous sequences in any user-specified protein sequence database. If sequences are found, they are added to the initial query sequences and a new HMM profile model is built. This process is repeated until no new sequences are found (i.e. convergence is reached). Inputs # Two inputs are required for IterHMMBuild. The first input is either a fasta file with at least one protein sequence ( Figure 2 ) OR a directory location where multiple individual fasta files are stored ( Figure 1 ). In the first case, the output will contain an HMM profile representative of the sequences in the fasta file given as input; if a directory is given as input then the HMM profile in the output will be a concatenation of HMM profiles, each corresponding to the fasta files present in the directory. The second input is a fasta file of protein database used to enrich initial protein sequence(s) of interest. HMM building step # The HMM building is a two-step procedure: a multiple sequence alignment is performed on the input sequences using muscle and the hmmbuild command from hmmer is then used to build the HMM profile from this alignment. However, note that at the first iteration the usearch command is performed on the input sequences to ensure that thoses sequences share no more than 90% (default value) of identity. Sequence enrichment step # The previously built HMM profile is searched against the protein database given as input using the hmmsearch command from hmmer. All matching sequences with a E-values a less than 0.01 (default value) and an expected accuracy per residue of the alignment b above or equal to 0.6 (default value) are retrieved. Those sequences are then merged to the initial input sequences. To ensure that sequences are not redundant, usearch is applied with a threshold identity value of 0.90. Note a Both conditional and independent E-values from hmmer are evaluated b Please see the hmmer documentation for more details about the accuracy Convergence # Basically, the convergence is reached when the number of sequences at iteration i+1 (Nseq i+1 ) is strictly equal to the number of sequences at iteration i (Nseq i ). However, because the number of new sequences found after multiple consecutive iterations can be really low, or even negative, a counter is also used to evaluate the convergence status in order to prevent unnecessay iterations (i.e. iterations that will increase the computation time without significantly enrich the number of new sequences). This counter is incremented each time the difference between Nseq i+1 and Nseq i is negative or equal to 1 (default value). The convergence is then also reached when the value of this counter is equal to 3 (default value). Outputs # An example output is as shown below: iterhmmbuild_2020-10-29_13-13-04/ \u251c\u2500\u2500 X.hmm \u251c\u2500\u2500 X_seed.clw \u251c\u2500\u2500 X_seed.fa \u251c\u2500\u2500 info.log \u251c\u2500\u2500 iter_1 \u2502 \u251c\u2500\u2500 X_enriched_nr.fasta \u2502 \u251c\u2500\u2500 X_nr.clw \u2502 \u251c\u2500\u2500 X_nr.domtblout \u2502 \u251c\u2500\u2500 X_nr.fa \u2502 \u2514\u2500\u2500 X_nr.hmm \u251c\u2500\u2500 ... \u2514\u2500\u2500 iter_6 \u251c\u2500\u2500 X_enriched_nr.clw \u251c\u2500\u2500 X_enriched_nr.domtblout \u251c\u2500\u2500 X_enriched_nr.fasta \u2514\u2500\u2500 X_enriched_nr.hmm The table below describes the content of the output directory: File name Description X.hmm Final HMM profile X_seed.fa Final sequences used to build X.hmm X_seed.clw Multiple alignment (clustal W format) of X_seed.fa info.log Log summary of the computation iter_1/X_nr.fa Non redundant sequences coming from usearch applied on the input X.fa (see IterHMMBuild procedure ) iter_1/X_nr.clw Multiple alignment of sequences in X_nr.fa iter_1/X_nr.hmm HMM profile built with X_nr.clw as input iter_1/X_nr.domtblout Output file of the hmmsearch command iter_1/X_enriched_nr.fasta Non redundant sequences coming from homologous sequences identified with hmmsearch and initial sequences in X.fa","title":"Overall procedure"},{"location":"ihb_introduction.html#iterhmmbuild-overall-procedure","text":"Figure 2: Pipeline overview of IterHMMBuild IterHMMBuild is an iterative search method based on the hmmer program, the aim of which is to provide users with a representative HMM protein profile of interest constructed by an iterative enrichment process starting from a small initial set of related protein sequences. The IterHMMBuild procedure starts building an HMM profile from either a set of related protein sequences or a single query sequence. This initial profile is then used to identify homologous sequences in any user-specified protein sequence database. If sequences are found, they are added to the initial query sequences and a new HMM profile model is built. This process is repeated until no new sequences are found (i.e. convergence is reached).","title":"IterHMMBuild overall procedure"},{"location":"ihb_introduction.html#inputs","text":"Two inputs are required for IterHMMBuild. The first input is either a fasta file with at least one protein sequence ( Figure 2 ) OR a directory location where multiple individual fasta files are stored ( Figure 1 ). In the first case, the output will contain an HMM profile representative of the sequences in the fasta file given as input; if a directory is given as input then the HMM profile in the output will be a concatenation of HMM profiles, each corresponding to the fasta files present in the directory. The second input is a fasta file of protein database used to enrich initial protein sequence(s) of interest.","title":"Inputs"},{"location":"ihb_introduction.html#hmm-building-step","text":"The HMM building is a two-step procedure: a multiple sequence alignment is performed on the input sequences using muscle and the hmmbuild command from hmmer is then used to build the HMM profile from this alignment. However, note that at the first iteration the usearch command is performed on the input sequences to ensure that thoses sequences share no more than 90% (default value) of identity.","title":"HMM building step"},{"location":"ihb_introduction.html#sequence-enrichment-step","text":"The previously built HMM profile is searched against the protein database given as input using the hmmsearch command from hmmer. All matching sequences with a E-values a less than 0.01 (default value) and an expected accuracy per residue of the alignment b above or equal to 0.6 (default value) are retrieved. Those sequences are then merged to the initial input sequences. To ensure that sequences are not redundant, usearch is applied with a threshold identity value of 0.90. Note a Both conditional and independent E-values from hmmer are evaluated b Please see the hmmer documentation for more details about the accuracy","title":"Sequence enrichment step"},{"location":"ihb_introduction.html#convergence","text":"Basically, the convergence is reached when the number of sequences at iteration i+1 (Nseq i+1 ) is strictly equal to the number of sequences at iteration i (Nseq i ). However, because the number of new sequences found after multiple consecutive iterations can be really low, or even negative, a counter is also used to evaluate the convergence status in order to prevent unnecessay iterations (i.e. iterations that will increase the computation time without significantly enrich the number of new sequences). This counter is incremented each time the difference between Nseq i+1 and Nseq i is negative or equal to 1 (default value). The convergence is then also reached when the value of this counter is equal to 3 (default value).","title":"Convergence"},{"location":"ihb_introduction.html#outputs","text":"An example output is as shown below: iterhmmbuild_2020-10-29_13-13-04/ \u251c\u2500\u2500 X.hmm \u251c\u2500\u2500 X_seed.clw \u251c\u2500\u2500 X_seed.fa \u251c\u2500\u2500 info.log \u251c\u2500\u2500 iter_1 \u2502 \u251c\u2500\u2500 X_enriched_nr.fasta \u2502 \u251c\u2500\u2500 X_nr.clw \u2502 \u251c\u2500\u2500 X_nr.domtblout \u2502 \u251c\u2500\u2500 X_nr.fa \u2502 \u2514\u2500\u2500 X_nr.hmm \u251c\u2500\u2500 ... \u2514\u2500\u2500 iter_6 \u251c\u2500\u2500 X_enriched_nr.clw \u251c\u2500\u2500 X_enriched_nr.domtblout \u251c\u2500\u2500 X_enriched_nr.fasta \u2514\u2500\u2500 X_enriched_nr.hmm The table below describes the content of the output directory: File name Description X.hmm Final HMM profile X_seed.fa Final sequences used to build X.hmm X_seed.clw Multiple alignment (clustal W format) of X_seed.fa info.log Log summary of the computation iter_1/X_nr.fa Non redundant sequences coming from usearch applied on the input X.fa (see IterHMMBuild procedure ) iter_1/X_nr.clw Multiple alignment of sequences in X_nr.fa iter_1/X_nr.hmm HMM profile built with X_nr.clw as input iter_1/X_nr.domtblout Output file of the hmmsearch command iter_1/X_enriched_nr.fasta Non redundant sequences coming from homologous sequences identified with hmmsearch and initial sequences in X.fa","title":"Outputs"},{"location":"ihb_usage.html","text":"IterHMMBuild usage guideline # Tip To guide the user, input data examples can be found in cusProSe/iterhmmbuild/datas/ : cusProSe/iterhmmbuild/datas/ \u251c\u2500\u2500 inputs \u2502 \u251c\u2500\u2500 A.fa \u2502 \u251c\u2500\u2500 KS.fa \u2502 \u2514\u2500\u2500 PP.fa \u2514\u2500\u2500 mgg_70-15_8.fasta All fasta files in the inputs/ directory contain sequences of three different protein domains. There is also the magnaporthe orizae proteome ( mgg_70-15_8.fasta ) that will be used as the protein database for the examples below. Quick start examples # Build a single HMM profile # Command to build a single HMM profile from the magnaporthe orizae proteome and representative of the A domain sequences: iterhmmbuild -fa inputs/A.fa -protdb mgg_70-15_8.fasta Build an HMM profile database # Command to build an HMM profile database specific to the magnaporthe orizae proteome with each profiles representative of the domain sequences present in the directory `inputs/`: iterhmmbuild -fa inputs/ -protdb mgg_70-15_8.fasta Note Please note that the user can also create an HMM profile database from a set of individual HMM profiles through the command create_hmmdb . Those HMM profiles must be placed in a unique directory that is given as an input. For instance, let's say we have the following directory containing three HMM profiles: my_hmm_dir/ \u251c\u2500\u2500 A.hmm \u251c\u2500\u2500 KS.hmm \u2514\u2500\u2500 PP.hmm Then the following command will generate an HMM profile database (that is a simple concatenation of the three HMM profiles) called mydb.hmm in an output directory named databases/ : create_hmmdb -hmmdir my_hmm_dir/ -dbname mydb.hmm -outdir databases/ Command line and parameters # As illustrated by the commands above, two arguments are mandatory for IterHMMBuild: -fa and -protdb . The input following -fa can be either a fasta file with at least one protein sequence OR a directory location where multiple individual fasta files are stored. The former can be used when the user wants to build a single HMM profile representative of the sequence(s) given as input. The latter should be used when the user wants to build a set of HMM profiles concatenated into an HMM profile database, with each HMM profile being representative of each related fasta files present in the directory given as input. The input following -protdb is a fasta file of the protein database used to enrich initial protein sequence(s) of interest. Help about the usage of IterHMMBuild and its parameters can be shown with the following command: iterhmmbuild -h usage: iterhmmbuild [-h] -fa [FA] -protdb [PROTDB] [-name [NAME]] [-out [OUT]] [-id ID] [-cov COV] [-cval CVAL] [-ival IVAL] [-acc ACC] [-delta DELTA] [-maxcount MAXCOUNT] Iterative building of hmm profiles optional arguments: -h, --help show this help message and exit -fa [FA] Fasta file of sequence(s) used as first seed or directory containing such files -protdb [PROTDB] Sequences used to learn the hmm profile (fasta format) -name [NAME] Name for the HMM profile (fasta name by default). -out [OUT] Output directory -id ID Sequence identity threshold to remove redundancy in seeds'sequences (0.9) -cov COV Minimum percentage of coverage alignment between hmm hit and hmm profile (0.0) -cval CVAL HMMER conditional e-value cutoff (0.01) -ival IVAL HMMER independant e-value cutoff (0.01) -acc ACC HMMER mean probability of the alignment accuracy between each residues of the target and the corresponding hmm state (0.6) -delta DELTA Convergence criteria: difference in the number of sequences found between two consecutive iterations to consider a non-significant change between between two consecutive iterations (1) -maxcount MAXCOUNT Convergence criteria: maximum number of times a non-significant change (conv_delta) is accepted before considering a convergence (3) Output of IterHMMBuild # After running IterHMMBuild an output directory will be generated in the following generic format: iterhmmbuild_year-month-day_hour-min-sec/ Output from the generation of a single HMM profile # The output directory generated from the command run in the quick start examples will have the following architecture: iterhmmbuild_2020-10-29_13-13-04/ \u251c\u2500\u2500 A.hmm \u251c\u2500\u2500 A_seed.clw \u251c\u2500\u2500 A_seed.fa \u251c\u2500\u2500 info.log \u251c\u2500\u2500 iter_1/ \u251c\u2500\u2500 iter_2/ \u251c\u2500\u2500 ... \u2514\u2500\u2500 iter_6/ The three main files of interest are: A.hmm Final HMM profile A.seed.clw Final sequences used to build A.hmm A.seed.fa Multiple alignment (clustal W format) of A_seed.fa info.log is a log summary of the computation. The subdirectories iter_i/ contain files obtained at each iteration and are described in section Overall procedure . Output from the generation of an HMM profile database # The output directory generated from the command run in the quick start examples will be a list of subdirectories such as the output described above. You will find at its root the file hmm_database.hmm , a concatenation of the HMM profiles of protein domains used as inputs. iterhmmbuild_2021-03-02_12-39-38 \u251c\u2500\u2500 hmm_database.hmm \u251c\u2500\u2500 info.log \u251c\u2500\u2500 A \u2502 \u251c\u2500\u2500 A.hmm \u2502 \u251c\u2500\u2500 A_seed.clw \u2502 \u2514\u2500\u2500 A_seed.fa \u251c\u2500\u2500 KS \u2502 \u251c\u2500\u2500 KS.hmm \u2502 \u251c\u2500\u2500 KS_seed.clw \u2502 \u2514\u2500\u2500 KS_seed.fa \u2514\u2500\u2500 PP \u251c\u2500\u2500 PP.hmm \u251c\u2500\u2500 PP_seed.clw \u2514\u2500\u2500 PP_seed.fa","title":"Usage guideline"},{"location":"ihb_usage.html#iterhmmbuild-usage-guideline","text":"Tip To guide the user, input data examples can be found in cusProSe/iterhmmbuild/datas/ : cusProSe/iterhmmbuild/datas/ \u251c\u2500\u2500 inputs \u2502 \u251c\u2500\u2500 A.fa \u2502 \u251c\u2500\u2500 KS.fa \u2502 \u2514\u2500\u2500 PP.fa \u2514\u2500\u2500 mgg_70-15_8.fasta All fasta files in the inputs/ directory contain sequences of three different protein domains. There is also the magnaporthe orizae proteome ( mgg_70-15_8.fasta ) that will be used as the protein database for the examples below.","title":"IterHMMBuild usage guideline"},{"location":"ihb_usage.html#quick-start-examples","text":"","title":"Quick start examples"},{"location":"ihb_usage.html#build-a-single-hmm-profile","text":"Command to build a single HMM profile from the magnaporthe orizae proteome and representative of the A domain sequences: iterhmmbuild -fa inputs/A.fa -protdb mgg_70-15_8.fasta","title":"Build a single HMM profile"},{"location":"ihb_usage.html#build-an-hmm-profile-database","text":"Command to build an HMM profile database specific to the magnaporthe orizae proteome with each profiles representative of the domain sequences present in the directory `inputs/`: iterhmmbuild -fa inputs/ -protdb mgg_70-15_8.fasta Note Please note that the user can also create an HMM profile database from a set of individual HMM profiles through the command create_hmmdb . Those HMM profiles must be placed in a unique directory that is given as an input. For instance, let's say we have the following directory containing three HMM profiles: my_hmm_dir/ \u251c\u2500\u2500 A.hmm \u251c\u2500\u2500 KS.hmm \u2514\u2500\u2500 PP.hmm Then the following command will generate an HMM profile database (that is a simple concatenation of the three HMM profiles) called mydb.hmm in an output directory named databases/ : create_hmmdb -hmmdir my_hmm_dir/ -dbname mydb.hmm -outdir databases/","title":"Build an HMM profile database"},{"location":"ihb_usage.html#command-line-and-parameters","text":"As illustrated by the commands above, two arguments are mandatory for IterHMMBuild: -fa and -protdb . The input following -fa can be either a fasta file with at least one protein sequence OR a directory location where multiple individual fasta files are stored. The former can be used when the user wants to build a single HMM profile representative of the sequence(s) given as input. The latter should be used when the user wants to build a set of HMM profiles concatenated into an HMM profile database, with each HMM profile being representative of each related fasta files present in the directory given as input. The input following -protdb is a fasta file of the protein database used to enrich initial protein sequence(s) of interest. Help about the usage of IterHMMBuild and its parameters can be shown with the following command: iterhmmbuild -h usage: iterhmmbuild [-h] -fa [FA] -protdb [PROTDB] [-name [NAME]] [-out [OUT]] [-id ID] [-cov COV] [-cval CVAL] [-ival IVAL] [-acc ACC] [-delta DELTA] [-maxcount MAXCOUNT] Iterative building of hmm profiles optional arguments: -h, --help show this help message and exit -fa [FA] Fasta file of sequence(s) used as first seed or directory containing such files -protdb [PROTDB] Sequences used to learn the hmm profile (fasta format) -name [NAME] Name for the HMM profile (fasta name by default). -out [OUT] Output directory -id ID Sequence identity threshold to remove redundancy in seeds'sequences (0.9) -cov COV Minimum percentage of coverage alignment between hmm hit and hmm profile (0.0) -cval CVAL HMMER conditional e-value cutoff (0.01) -ival IVAL HMMER independant e-value cutoff (0.01) -acc ACC HMMER mean probability of the alignment accuracy between each residues of the target and the corresponding hmm state (0.6) -delta DELTA Convergence criteria: difference in the number of sequences found between two consecutive iterations to consider a non-significant change between between two consecutive iterations (1) -maxcount MAXCOUNT Convergence criteria: maximum number of times a non-significant change (conv_delta) is accepted before considering a convergence (3)","title":"Command line and parameters"},{"location":"ihb_usage.html#output-of-iterhmmbuild","text":"After running IterHMMBuild an output directory will be generated in the following generic format: iterhmmbuild_year-month-day_hour-min-sec/","title":"Output of IterHMMBuild"},{"location":"ihb_usage.html#output-from-the-generation-of-a-single-hmm-profile","text":"The output directory generated from the command run in the quick start examples will have the following architecture: iterhmmbuild_2020-10-29_13-13-04/ \u251c\u2500\u2500 A.hmm \u251c\u2500\u2500 A_seed.clw \u251c\u2500\u2500 A_seed.fa \u251c\u2500\u2500 info.log \u251c\u2500\u2500 iter_1/ \u251c\u2500\u2500 iter_2/ \u251c\u2500\u2500 ... \u2514\u2500\u2500 iter_6/ The three main files of interest are: A.hmm Final HMM profile A.seed.clw Final sequences used to build A.hmm A.seed.fa Multiple alignment (clustal W format) of A_seed.fa info.log is a log summary of the computation. The subdirectories iter_i/ contain files obtained at each iteration and are described in section Overall procedure .","title":"Output from the generation of a single HMM profile"},{"location":"ihb_usage.html#output-from-the-generation-of-an-hmm-profile-database","text":"The output directory generated from the command run in the quick start examples will be a list of subdirectories such as the output described above. You will find at its root the file hmm_database.hmm , a concatenation of the HMM profiles of protein domains used as inputs. iterhmmbuild_2021-03-02_12-39-38 \u251c\u2500\u2500 hmm_database.hmm \u251c\u2500\u2500 info.log \u251c\u2500\u2500 A \u2502 \u251c\u2500\u2500 A.hmm \u2502 \u251c\u2500\u2500 A_seed.clw \u2502 \u2514\u2500\u2500 A_seed.fa \u251c\u2500\u2500 KS \u2502 \u251c\u2500\u2500 KS.hmm \u2502 \u251c\u2500\u2500 KS_seed.clw \u2502 \u2514\u2500\u2500 KS_seed.fa \u2514\u2500\u2500 PP \u251c\u2500\u2500 PP.hmm \u251c\u2500\u2500 PP_seed.clw \u2514\u2500\u2500 PP_seed.fa","title":"Output from the generation of an HMM profile database"},{"location":"installation.html","text":"Installation # Note CusProSe requires a python version >= 3.7 External dependencies # CusProSe relies on three external tools: hmmer, muscle and usearch. The first two can be easily installed from the following commands: hmmer (tested with version 3.3) sudo apt install hmmer muscle (tested with version 3.8.1551) sudo apt install muscle For usearch, you first need to download it here: usearch (tested with version v10.0.240) Next, you will have to rename it and make it accessible from anywhere in your system: # rename to usearch mv usearchXX.X.XXX_i86xxxx.gz usearch # make usearch executable chmod +x usearch # make usearch easily accessible mkdir ~/bin mv usearch ~/bin Finally, copy the following line in your .bashrc file (or .bash_profile for macos users) export PATH=$PATH:~/bin Create an isolated environment # Although not indispensable, this step is highly recommended (it will allow you to work on different projects avoiding potential conflicts between different versions of some python libraries). Install virtualenv # python3 -m pip install virtualenv Create a virtual python3 environment # virtualenv -p python3 my_env Activate the created environment # source my_env/bin/activate Once activated, any python library you'll install using pip will be installed solely in this isolated environment. Every time you'll need to work with libraries installed in this environment (i.e. work on your project), you'll have to activate it. Once you're done working on your project, simply type deactivate to exit the environment. Download and install the latest release of CusProSe # Click here for the latest release: Uncompress the archive # If you downloaded the .zip file: unzip cusProSe-x.x.x.zip If you downloaded the .tar.gz file: tar xzvf cusProSe-x.x.x.tar.gz Go to the cusProSe directory # cd cusProSe-x.x.x/ Install CusProSe on your virtual environment # Make sure your virtual environment is activated and type the following command: python setup.py install or pip install . Note If the installation successfully worked, then typing: iterhmmbuild should display: usage: iterhmmbuild [-h] -fa [FA] -protdb [PROTDB] [-name [NAME]] [-out [OUT]] [-id ID] [-cov COV] [-cval CVAL] [-ival IVAL] [-acc ACC] prosecda should display: usage: prosecda [-h] -proteome [PROTEOME] -hmmdb [HMMDB] -rules [RULES] [-out [OUT]] [-cov COV] [-cevalue CVAL] [-ievalue IVAL] [-score SCORE] [-acc ACC] [--nopdf] create_hmmdb should display: usage: create_hmmdb [-h] -hmmdir [HMMDIR] [-dbname [DBNAME]] [-outdir [OUTDIR]]","title":"Installation"},{"location":"installation.html#installation","text":"Note CusProSe requires a python version >= 3.7","title":"Installation"},{"location":"installation.html#external-dependencies","text":"CusProSe relies on three external tools: hmmer, muscle and usearch. The first two can be easily installed from the following commands: hmmer (tested with version 3.3) sudo apt install hmmer muscle (tested with version 3.8.1551) sudo apt install muscle For usearch, you first need to download it here: usearch (tested with version v10.0.240) Next, you will have to rename it and make it accessible from anywhere in your system: # rename to usearch mv usearchXX.X.XXX_i86xxxx.gz usearch # make usearch executable chmod +x usearch # make usearch easily accessible mkdir ~/bin mv usearch ~/bin Finally, copy the following line in your .bashrc file (or .bash_profile for macos users) export PATH=$PATH:~/bin","title":"External dependencies"},{"location":"installation.html#create-an-isolated-environment","text":"Although not indispensable, this step is highly recommended (it will allow you to work on different projects avoiding potential conflicts between different versions of some python libraries).","title":"Create an isolated environment"},{"location":"installation.html#install-virtualenv","text":"python3 -m pip install virtualenv","title":"Install virtualenv"},{"location":"installation.html#create-a-virtual-python3-environment","text":"virtualenv -p python3 my_env","title":"Create a virtual python3 environment"},{"location":"installation.html#activate-the-created-environment","text":"source my_env/bin/activate Once activated, any python library you'll install using pip will be installed solely in this isolated environment. Every time you'll need to work with libraries installed in this environment (i.e. work on your project), you'll have to activate it. Once you're done working on your project, simply type deactivate to exit the environment.","title":"Activate the created environment"},{"location":"installation.html#download-and-install-the-latest-release-of-cusprose","text":"Click here for the latest release:","title":"Download and install the latest release of CusProSe"},{"location":"installation.html#uncompress-the-archive","text":"If you downloaded the .zip file: unzip cusProSe-x.x.x.zip If you downloaded the .tar.gz file: tar xzvf cusProSe-x.x.x.tar.gz","title":"Uncompress the archive"},{"location":"installation.html#go-to-the-cusprose-directory","text":"cd cusProSe-x.x.x/","title":"Go to the cusProSe directory"},{"location":"installation.html#install-cusprose-on-your-virtual-environment","text":"Make sure your virtual environment is activated and type the following command: python setup.py install or pip install . Note If the installation successfully worked, then typing: iterhmmbuild should display: usage: iterhmmbuild [-h] -fa [FA] -protdb [PROTDB] [-name [NAME]] [-out [OUT]] [-id ID] [-cov COV] [-cval CVAL] [-ival IVAL] [-acc ACC] prosecda should display: usage: prosecda [-h] -proteome [PROTEOME] -hmmdb [HMMDB] -rules [RULES] [-out [OUT]] [-cov COV] [-cevalue CVAL] [-ievalue IVAL] [-score SCORE] [-acc ACC] [--nopdf] create_hmmdb should display: usage: create_hmmdb [-h] -hmmdir [HMMDIR] [-dbname [DBNAME]] [-outdir [OUTDIR]]","title":"Install CusProSe on your virtual environment"},{"location":"psd_introduction.html","text":"ProSeCDA Overall procedure # Figure 2: Pipeline overview of ProSeCDA ProSeCDA is a tool that allows to search in a given protein database multiple proteins of interest defined by a user-specified set of domains. The first step in ProSeCDA is to annotate a protein database of interest with domains from a user-specified HMM profile database. In the next step the annotated proteins are filtered following a set of rules defined by the user. The rule consists to define one or a set of protein families based on the presence and/or absence of domains. All proteins matching thoses rules are then finally accessible in the output. Inputs # ProSeCDA requires three inputs: a protein database in a fasta format in which the user wants to search proteins of interest based on their domain architecture. an HMM domain profile database used to annotate the input protein database. Any HMM domain profile database can be used as long as it is compatible with hmmersearch. a YAML file containing the rules, that is a set of protein families defined by the presence and/or absence of specific domain(s). The format of the YAML file is described in Usage guideline . Please note that domains used to define proteins on interest must be present in the HMM domain profile database. Annotation # Selection of matching domains # The annotation step is required to assign domains from the HMM profile database matching sequences in the protein database. The annotation procedure uses hmmsearch to search for each of the HMM domain profile present in the YAML rules file against the protein database of interest. All matching sequences with an E-value a less than 0.01 (default value) and an expected accuracy per residue of the alignment b above or equal to 0.6 (default value) are then retrieved. Note a Both conditional and independent E-values from hmmer are evaluated b Please see the hmmer documentation for more details about the accuracy Resolving overlapping domains # To resolve overlapping domains a , an approach similar to the heaviest weighted clique-finding method described in Orengo et al. is used. When multiple matching domains are found for a protein sequence and some of those domains overlap, all possible domain architectures defined by a set of non-overlapping domains are identified, with each domain being assigned a score corresponding to -log(E-value). An alternative score is also used in case the E-value associated with a match is equal to 0.0. In that case, the bit score from hmmer is assigned to each domain instead of the -log(E-value) which cannot be computed. The protein is then assigned the most-likely domain architecture which is defined as the combination of non-overlapping domains that gives the highest total score. Note a We consider that two domains are overlapping if at least 40% of the shortest domain sequence overlap with the other domain. Filtering # The filtering step searches in all precedently annotated proteins the domain architectures matching those in the set of rules defined by the user. A match with a user-defined family is valid for a protein if its most-likely domain architecture fits the mandatory domains and if no forbidden domains are present. Moreover, if an E-value threshold is specified in the rules for a given mandatory domain, this domain must match with an E-value at least below this threshold. Output # The output of ProSeCDA has the following architecture: prosecda_yyyy-mm-dd_hh-mm-ss/ \u251c\u2500\u2500 protein_database_filename.domtblout \u251c\u2500\u2500 info.log \u2514\u2500\u2500 results/ \u251c\u2500\u2500 family_A1/ \u2502 \u251c\u2500\u2500 all_matching_proteins.pdf \u2502 \u251c\u2500\u2500 protein_id_1.fa \u2502 \u251c\u2500\u2500 protein_id_1.pdf \u2502 \u251c\u2500\u2500 protein_id_1.xml \u2502 \u251c\u2500\u2500 protein_id_2.fa \u2502 \u251c\u2500\u2500 protein_id_2.pdf \u2502 \u2514\u2500\u2500 protein_id_2.xml \u251c\u2500\u2500 family_A2/ \u2502 \u251c\u2500\u2500 all_matching_proteins.pdf \u2502 \u251c\u2500\u2500 protein_id_8.fa \u2502 \u251c\u2500\u2500 protein_id_8.pdf \u2502 \u251c\u2500\u2500 protein_id_8.xml \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ... The table below describes the content of the output directory: File/Directory name Description protein_database_filename.domtblout hmmsearch output in domtblout format info.log Summary log of the computation family_A1/ Subdirectory containing detailed files for proteins matching the rule defining 'family A1' all_matching_proteins.pdf Figures of all proteins matching the family rule with their most-likely domain architecture protein_id_1.fa Fasta sequence of the protein protein_id_1.pdf Figure of the protein with all matching domains protein_id_1.xml XML file describing the protein","title":"Overall procedure"},{"location":"psd_introduction.html#prosecda-overall-procedure","text":"Figure 2: Pipeline overview of ProSeCDA ProSeCDA is a tool that allows to search in a given protein database multiple proteins of interest defined by a user-specified set of domains. The first step in ProSeCDA is to annotate a protein database of interest with domains from a user-specified HMM profile database. In the next step the annotated proteins are filtered following a set of rules defined by the user. The rule consists to define one or a set of protein families based on the presence and/or absence of domains. All proteins matching thoses rules are then finally accessible in the output.","title":"ProSeCDA Overall procedure"},{"location":"psd_introduction.html#inputs","text":"ProSeCDA requires three inputs: a protein database in a fasta format in which the user wants to search proteins of interest based on their domain architecture. an HMM domain profile database used to annotate the input protein database. Any HMM domain profile database can be used as long as it is compatible with hmmersearch. a YAML file containing the rules, that is a set of protein families defined by the presence and/or absence of specific domain(s). The format of the YAML file is described in Usage guideline . Please note that domains used to define proteins on interest must be present in the HMM domain profile database.","title":"Inputs"},{"location":"psd_introduction.html#annotation","text":"","title":"Annotation"},{"location":"psd_introduction.html#selection-of-matching-domains","text":"The annotation step is required to assign domains from the HMM profile database matching sequences in the protein database. The annotation procedure uses hmmsearch to search for each of the HMM domain profile present in the YAML rules file against the protein database of interest. All matching sequences with an E-value a less than 0.01 (default value) and an expected accuracy per residue of the alignment b above or equal to 0.6 (default value) are then retrieved. Note a Both conditional and independent E-values from hmmer are evaluated b Please see the hmmer documentation for more details about the accuracy","title":"Selection of matching domains"},{"location":"psd_introduction.html#resolving-overlapping-domains","text":"To resolve overlapping domains a , an approach similar to the heaviest weighted clique-finding method described in Orengo et al. is used. When multiple matching domains are found for a protein sequence and some of those domains overlap, all possible domain architectures defined by a set of non-overlapping domains are identified, with each domain being assigned a score corresponding to -log(E-value). An alternative score is also used in case the E-value associated with a match is equal to 0.0. In that case, the bit score from hmmer is assigned to each domain instead of the -log(E-value) which cannot be computed. The protein is then assigned the most-likely domain architecture which is defined as the combination of non-overlapping domains that gives the highest total score. Note a We consider that two domains are overlapping if at least 40% of the shortest domain sequence overlap with the other domain.","title":"Resolving overlapping domains"},{"location":"psd_introduction.html#filtering","text":"The filtering step searches in all precedently annotated proteins the domain architectures matching those in the set of rules defined by the user. A match with a user-defined family is valid for a protein if its most-likely domain architecture fits the mandatory domains and if no forbidden domains are present. Moreover, if an E-value threshold is specified in the rules for a given mandatory domain, this domain must match with an E-value at least below this threshold.","title":"Filtering"},{"location":"psd_introduction.html#output","text":"The output of ProSeCDA has the following architecture: prosecda_yyyy-mm-dd_hh-mm-ss/ \u251c\u2500\u2500 protein_database_filename.domtblout \u251c\u2500\u2500 info.log \u2514\u2500\u2500 results/ \u251c\u2500\u2500 family_A1/ \u2502 \u251c\u2500\u2500 all_matching_proteins.pdf \u2502 \u251c\u2500\u2500 protein_id_1.fa \u2502 \u251c\u2500\u2500 protein_id_1.pdf \u2502 \u251c\u2500\u2500 protein_id_1.xml \u2502 \u251c\u2500\u2500 protein_id_2.fa \u2502 \u251c\u2500\u2500 protein_id_2.pdf \u2502 \u2514\u2500\u2500 protein_id_2.xml \u251c\u2500\u2500 family_A2/ \u2502 \u251c\u2500\u2500 all_matching_proteins.pdf \u2502 \u251c\u2500\u2500 protein_id_8.fa \u2502 \u251c\u2500\u2500 protein_id_8.pdf \u2502 \u251c\u2500\u2500 protein_id_8.xml \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 ... The table below describes the content of the output directory: File/Directory name Description protein_database_filename.domtblout hmmsearch output in domtblout format info.log Summary log of the computation family_A1/ Subdirectory containing detailed files for proteins matching the rule defining 'family A1' all_matching_proteins.pdf Figures of all proteins matching the family rule with their most-likely domain architecture protein_id_1.fa Fasta sequence of the protein protein_id_1.pdf Figure of the protein with all matching domains protein_id_1.xml XML file describing the protein","title":"Output"},{"location":"psd_usage.html","text":"ProSeCDA usage guideline # Tip To guide the user, input data files can be found in cusProSe/prosecda/datas/ : cusProSe/prosecda/datas/ \u251c\u2500\u2500 database.hmm \u251c\u2500\u2500 mgg_70-15_8.fasta \u2514\u2500\u2500 rules.yaml Those are the three mandatory files required as inputs to run prosecda: rules.yaml is a YAML file in which proteins of interest are described based on the presence/absence of specific domains database.hmm is a customized HMM profile database made of 24 HMM protein domain models mgg_70-15_8.fasta is the magnaporthe orizae proteome that will be scanned against proteins of interest defined in the YAML rules file Quick start example # The command below will search in the magnaporthe orizae proteome all proteins defined in rules.yaml (the HMM profile database database.hmm is used to find domains of interest matching proteins in the magnaporthe orizae proteome): prosecda -proteome mgg_70-15_8.fasta -hmmdb database.hmm -rules rules.yaml Help about the usage of ProSeCDA and its parameters can be shown with the following command: prosecda -h : usage: prosecda [-h] -proteome [PROTEOME] -hmmdb [HMMDB] -rules [RULES] [-out [OUT]] [-cov COV] [-cevalue CEVALUE] [-ievalue IEVALUE] [-score SCORE] [-acc ACC] [--nopdf] Search proteins matching rules. optional arguments: -h, --help show this help message and exit -proteome [PROTEOME] Proteome file (.fasta) -hmmdb [HMMDB] HMM profile database -rules [RULES] Rules'file (.yaml) -out [OUT] Output directory -cov COV Minimum ratio between the length of the HMM profile stretch that matches a sequence and the overall length of the HMM profile (0.0) -cevalue CEVALUE HMMER conditional e-value cutoff (0.01) -ievalue IEVALUE HMMER independant e-value cutoff (0.01) -score SCORE HMMER score cutoff (3.0) -acc ACC HMMER mean probability of the alignment accuracy between each residues of the target and the corresponding hmm state (0.6) --nopdf Deactivate the generation of the pdf results (False) Creating rules # The proteins the user is interested in must be described in a file containing simple rules defining for each protein of interest which domains are mandatory and/or which one are forbidden. An E-value (corresponding to the independent domain E-value from hmmsearch) can also be specified for each mandatory domains. In that case, a mandatory domain must match a sequence with an E-value at least below the one specified. If no E-value is defined for mandatory domains, an E-value of 0.01 is used by default. Editing rules from GUI # The file in which rules are edited must respect a specific syntax in a YAML format. To make it simpler, a Graphical User Interface (GUI) has been implemented. You can access it through the command create_rules Figure 3: Graphical User Interface to edit rules As shown in the above image, a rule can be defined by five different inputs: Name (required): category/family name the proteins that'll match the rule will be assigned to Comment (optional): can be used to describe the rule Mandatory (required): domain name the protein must contain E-value (optional): minimal E-value the associated domain must match a sequence (0.01 if not specified) Forbidden (optional): domain name the protein must not contain Once you have added all your mandatory/forbidden domains describing the domain architecture your proteins of interest must match, click on Add rule to the list to validate the rule. You'll see it listed in the Rule list panel. Repeat the procedure to create as many rules as you want. Once all your desired rules are defined, click on Save rules to save them in a YAML file. This YAML file will look like the one described below: PKS: COMMENT: Polyketide Synthase CONDITION: mandatory: - KS - AT - PP-binding, 0.0001 forbidden: - C PKS-like: COMMENT: Polyketide Synthase like CONDITION: mandatory: - KS - AT forbidden: PKS_type3.0: COMMENT: Polyketide Syntase type III CONDITION: mandatory: - CHS_like forbidden: Updating an existing rule file # If the user wants to update an already existing rule file, he will have to manually edit it. In that case be aware that a YAML file must respect a specific syntax . The simplest way to add new rules in an already existing file might to copy paste an exisitng rule and to adapt its content. Note that all characters in blue in the above YAML file are required, and whitespace indentations must be respected. Output of ProSeCDA # Overall architecture # The output directory generated from the command run in the Quick start example will be as described below: prosecda_year-month-day_hour-min-sec/ \u251c\u2500\u2500 css/ \u251c\u2500\u2500 images/ \u251c\u2500\u2500 index.html \u251c\u2500\u2500 info.log \u251c\u2500\u2500 js/ \u251c\u2500\u2500 mgg_70-15_8.domtblout \u2514\u2500\u2500 results/ with: index.html : an interactive web page allowing to visualize the results (described here ) css/ , js/ and images/ : folders containing files read by index.html info.log : summary log of the computation run mgg_70-15_8.domtblout : output file of hmmsearch results/ : directory containing different output files for rules matching proteins Content of the results/ directory # The results/ directory contains a list of subdirectories, each one corresponding to a user-defined protein family for which match has been found ( DMATS/ , Ent_kaurene_synthase/ ...): results/ \u251c\u2500\u2500 DMATS/ \u2502 \u251c\u2500\u2500 all_DMATS.pdf \u2502 \u251c\u2500\u2500 MGG_06540T0.fa \u2502 \u251c\u2500\u2500 MGG_06540T0.pdf \u2502 \u251c\u2500\u2500 MGG_06540T0.xml \u2502 \u251c\u2500\u2500 MGG_10953T0.fa \u2502 \u251c\u2500\u2500 MGG_10953T0.pdf \u2502 \u251c\u2500\u2500 MGG_10953T0.xml \u2502 \u251c\u2500\u2500 MGG_12480T0.fa \u2502 \u251c\u2500\u2500 MGG_12480T0.pdf \u2502 \u2514\u2500\u2500 MGG_12480T0.xml \u251c\u2500\u2500 Ent_kaurene_synthase/ \u2502 \u251c\u2500\u2500 all_Ent_kaurene_synthase.pdf \u2502 \u251c\u2500\u2500 MGG_01949T0.fa \u2502 \u251c\u2500\u2500 MGG_01949T0.pdf \u2502 \u251c\u2500\u2500 MGG_01949T0.xml | ... ... Inside each protein family folder, three files with the related protein ID as the basename ( e.g. MGG_06540T0) are generated for each protein matching the user-defined family rule: protein_ID.fa : the protein sequence in fasta format protein_ID.xml : details in XML format about the proteins and its matching domains protein_ID.pdf : a graphical representation of all of the domains that matched the protein The file whose basename follows the syntax all_xxx.pdf (where xxx stands for the family name) is a graphical representation of the most-likely domains architecture for all the proteins that have been found to match the user-defined family rule. Please note that for a given protein the graphical representation in this file will be different from the one found in protein_ID.pdf , the latter representing all the domains that have been found to match the protein. Some of those domains might not be visible in the most-likely domain architecture. This will be the case for a domain i that overlaps with a domain j and if any architecture in which domain i is present is not the most-likely architecture, that is the one with the highest score (see here for details about how the score is assigned). Illustration of the output files # The all_xxx.pdf file # The file whose basename follows the syntax all_xxx.pdf is a multipage pdf file containing graphical representations of the most-likely domain architecture of all the proteins that have been found to match the user-defined family rule. An example of the first page of all_PKS.pdf is shown below: The first line of the figure represents all domains composing the most-likely domain architecture found for the protein MGG_00233T0. The next lines represent details information about each domain, namely its amino acid positions, name, independant e-value (i-evalue) and its score. The protein_ID.pdf file # The graphical representation found for a given protein in the file protein_ID.pdf does not show any domain architecture; instead it represents all the domains that matched the protein sequence during the annotation step . The main function of this file is to keep track of domains that may have not been retained to be part of the most-likely architecture. It thus provides the user a way to check the validity for a protein to really belong to the assigned protein family. To illustrate that point, let's compare both graphical representations for the protein MGG_04631T0 that has been assigned to the Sesquiterp_synthase family: Figure 4: Comparison of the graphical representations of the protein MGG_04631T0 found in ( A ) all_Sesquiterp_synthase.pdf and ( B ) MGG_04631T0.pdf . The figure 4A shows the most-likely domain architecture assigned to the protein MGG_04631T0 (found in all_Sesquiterp_synthase.pdf ) which is composed of only one domain: the sesquiterpene domain. The figure 4B shows all the domains that matched the protein sequence during the annotation step. We can see in this representation that both the sesquiterpene domain and the fusicocadiene domain matched the protein sequence. Only the sesquiterpene domain has been retained in the most-likely domain architecture based on its most favorable i-evalue and thus made the protein assigned as an Sesquiterp_synthase. The protein_ID.xml file # The protein_ID.xml file contains the main information about the protein. An example of the content of this xml file is shown below for the protein MGG_04631T0: <protein> <id>MGG_04631T0</id> <sequence>MADRTCVTLPDMFRGFIVQEPKVNKHYEAVKPVSEKWLARICAFSPMMQKRVGACDFSYFCSIAAPEAPIHKLRTMCDWGNWVFPFDDMFDSGDLRSDLIVTRHVLDSLLADMKGHKFRGLKIPVVLAHDDIYRRLSEVETKNPSISGVQRRFARAMELYALGVAQHVQDFTESGLPCPQEMLETRRLSVGVAPLYHLVEYAHSIRLPDEVFEDPAIQTLERLGADMVIMSNDMLSYQKEEASTNNEGCPFNMVAACRMSGQSAQEAFDTVGALLEESYYEWEETMRQVPARGGDVERDVQRYIKGIQDVVQANITWSFRSKRYLGVHAPEVRRTKKFDVMTHPPYLDKDMAELR</sequence> <sequence_length>356</sequence_length> <class_name>Sesquiterp_synthase</class_name> <most_likely_architecture> <domain name=\"sesquiterpene\"> <c-evalue>2e-36</c-evalue> <i-evalue>3.3e-33</i-evalue> <score>114.4</score> <start>4</start> <end>333</end> <domain_length>330</domain_length> </domain> </most_likely_architecture> <other_matching_domains> <domain name=\"fusicocadiene\"> <c-evalue>7.9e-06</c-evalue> <i-evalue>0.0093</i-evalue> <score>13.5</score> <start>43</start> <end>343</end> <domain_length>301</domain_length> </domain> </other_matching_domains> </protein> Please note that if domains matched the protein sequence during the annotation step but don't belong to the most-likely architecture, those domains will be listed in the xml file under the tag <other_matching_domains> .","title":"Usage guideline"},{"location":"psd_usage.html#prosecda-usage-guideline","text":"Tip To guide the user, input data files can be found in cusProSe/prosecda/datas/ : cusProSe/prosecda/datas/ \u251c\u2500\u2500 database.hmm \u251c\u2500\u2500 mgg_70-15_8.fasta \u2514\u2500\u2500 rules.yaml Those are the three mandatory files required as inputs to run prosecda: rules.yaml is a YAML file in which proteins of interest are described based on the presence/absence of specific domains database.hmm is a customized HMM profile database made of 24 HMM protein domain models mgg_70-15_8.fasta is the magnaporthe orizae proteome that will be scanned against proteins of interest defined in the YAML rules file","title":"ProSeCDA usage guideline"},{"location":"psd_usage.html#quick-start-example","text":"The command below will search in the magnaporthe orizae proteome all proteins defined in rules.yaml (the HMM profile database database.hmm is used to find domains of interest matching proteins in the magnaporthe orizae proteome): prosecda -proteome mgg_70-15_8.fasta -hmmdb database.hmm -rules rules.yaml Help about the usage of ProSeCDA and its parameters can be shown with the following command: prosecda -h : usage: prosecda [-h] -proteome [PROTEOME] -hmmdb [HMMDB] -rules [RULES] [-out [OUT]] [-cov COV] [-cevalue CEVALUE] [-ievalue IEVALUE] [-score SCORE] [-acc ACC] [--nopdf] Search proteins matching rules. optional arguments: -h, --help show this help message and exit -proteome [PROTEOME] Proteome file (.fasta) -hmmdb [HMMDB] HMM profile database -rules [RULES] Rules'file (.yaml) -out [OUT] Output directory -cov COV Minimum ratio between the length of the HMM profile stretch that matches a sequence and the overall length of the HMM profile (0.0) -cevalue CEVALUE HMMER conditional e-value cutoff (0.01) -ievalue IEVALUE HMMER independant e-value cutoff (0.01) -score SCORE HMMER score cutoff (3.0) -acc ACC HMMER mean probability of the alignment accuracy between each residues of the target and the corresponding hmm state (0.6) --nopdf Deactivate the generation of the pdf results (False)","title":"Quick start example"},{"location":"psd_usage.html#creating-rules","text":"The proteins the user is interested in must be described in a file containing simple rules defining for each protein of interest which domains are mandatory and/or which one are forbidden. An E-value (corresponding to the independent domain E-value from hmmsearch) can also be specified for each mandatory domains. In that case, a mandatory domain must match a sequence with an E-value at least below the one specified. If no E-value is defined for mandatory domains, an E-value of 0.01 is used by default.","title":"Creating rules"},{"location":"psd_usage.html#editing-rules-from-gui","text":"The file in which rules are edited must respect a specific syntax in a YAML format. To make it simpler, a Graphical User Interface (GUI) has been implemented. You can access it through the command create_rules Figure 3: Graphical User Interface to edit rules As shown in the above image, a rule can be defined by five different inputs: Name (required): category/family name the proteins that'll match the rule will be assigned to Comment (optional): can be used to describe the rule Mandatory (required): domain name the protein must contain E-value (optional): minimal E-value the associated domain must match a sequence (0.01 if not specified) Forbidden (optional): domain name the protein must not contain Once you have added all your mandatory/forbidden domains describing the domain architecture your proteins of interest must match, click on Add rule to the list to validate the rule. You'll see it listed in the Rule list panel. Repeat the procedure to create as many rules as you want. Once all your desired rules are defined, click on Save rules to save them in a YAML file. This YAML file will look like the one described below: PKS: COMMENT: Polyketide Synthase CONDITION: mandatory: - KS - AT - PP-binding, 0.0001 forbidden: - C PKS-like: COMMENT: Polyketide Synthase like CONDITION: mandatory: - KS - AT forbidden: PKS_type3.0: COMMENT: Polyketide Syntase type III CONDITION: mandatory: - CHS_like forbidden:","title":"Editing rules from GUI"},{"location":"psd_usage.html#updating-an-existing-rule-file","text":"If the user wants to update an already existing rule file, he will have to manually edit it. In that case be aware that a YAML file must respect a specific syntax . The simplest way to add new rules in an already existing file might to copy paste an exisitng rule and to adapt its content. Note that all characters in blue in the above YAML file are required, and whitespace indentations must be respected.","title":"Updating an existing rule file"},{"location":"psd_usage.html#output-of-prosecda","text":"","title":"Output of ProSeCDA"},{"location":"psd_usage.html#overall-architecture","text":"The output directory generated from the command run in the Quick start example will be as described below: prosecda_year-month-day_hour-min-sec/ \u251c\u2500\u2500 css/ \u251c\u2500\u2500 images/ \u251c\u2500\u2500 index.html \u251c\u2500\u2500 info.log \u251c\u2500\u2500 js/ \u251c\u2500\u2500 mgg_70-15_8.domtblout \u2514\u2500\u2500 results/ with: index.html : an interactive web page allowing to visualize the results (described here ) css/ , js/ and images/ : folders containing files read by index.html info.log : summary log of the computation run mgg_70-15_8.domtblout : output file of hmmsearch results/ : directory containing different output files for rules matching proteins","title":"Overall architecture"},{"location":"psd_usage.html#content-of-the-results-directory","text":"The results/ directory contains a list of subdirectories, each one corresponding to a user-defined protein family for which match has been found ( DMATS/ , Ent_kaurene_synthase/ ...): results/ \u251c\u2500\u2500 DMATS/ \u2502 \u251c\u2500\u2500 all_DMATS.pdf \u2502 \u251c\u2500\u2500 MGG_06540T0.fa \u2502 \u251c\u2500\u2500 MGG_06540T0.pdf \u2502 \u251c\u2500\u2500 MGG_06540T0.xml \u2502 \u251c\u2500\u2500 MGG_10953T0.fa \u2502 \u251c\u2500\u2500 MGG_10953T0.pdf \u2502 \u251c\u2500\u2500 MGG_10953T0.xml \u2502 \u251c\u2500\u2500 MGG_12480T0.fa \u2502 \u251c\u2500\u2500 MGG_12480T0.pdf \u2502 \u2514\u2500\u2500 MGG_12480T0.xml \u251c\u2500\u2500 Ent_kaurene_synthase/ \u2502 \u251c\u2500\u2500 all_Ent_kaurene_synthase.pdf \u2502 \u251c\u2500\u2500 MGG_01949T0.fa \u2502 \u251c\u2500\u2500 MGG_01949T0.pdf \u2502 \u251c\u2500\u2500 MGG_01949T0.xml | ... ... Inside each protein family folder, three files with the related protein ID as the basename ( e.g. MGG_06540T0) are generated for each protein matching the user-defined family rule: protein_ID.fa : the protein sequence in fasta format protein_ID.xml : details in XML format about the proteins and its matching domains protein_ID.pdf : a graphical representation of all of the domains that matched the protein The file whose basename follows the syntax all_xxx.pdf (where xxx stands for the family name) is a graphical representation of the most-likely domains architecture for all the proteins that have been found to match the user-defined family rule. Please note that for a given protein the graphical representation in this file will be different from the one found in protein_ID.pdf , the latter representing all the domains that have been found to match the protein. Some of those domains might not be visible in the most-likely domain architecture. This will be the case for a domain i that overlaps with a domain j and if any architecture in which domain i is present is not the most-likely architecture, that is the one with the highest score (see here for details about how the score is assigned).","title":"Content of the results/ directory"},{"location":"psd_usage.html#illustration-of-the-output-files","text":"","title":"Illustration of the output files"},{"location":"psd_usage.html#the-all_xxxpdf-file","text":"The file whose basename follows the syntax all_xxx.pdf is a multipage pdf file containing graphical representations of the most-likely domain architecture of all the proteins that have been found to match the user-defined family rule. An example of the first page of all_PKS.pdf is shown below: The first line of the figure represents all domains composing the most-likely domain architecture found for the protein MGG_00233T0. The next lines represent details information about each domain, namely its amino acid positions, name, independant e-value (i-evalue) and its score.","title":"The all_xxx.pdf file"},{"location":"psd_usage.html#the-protein_idpdf-file","text":"The graphical representation found for a given protein in the file protein_ID.pdf does not show any domain architecture; instead it represents all the domains that matched the protein sequence during the annotation step . The main function of this file is to keep track of domains that may have not been retained to be part of the most-likely architecture. It thus provides the user a way to check the validity for a protein to really belong to the assigned protein family. To illustrate that point, let's compare both graphical representations for the protein MGG_04631T0 that has been assigned to the Sesquiterp_synthase family: Figure 4: Comparison of the graphical representations of the protein MGG_04631T0 found in ( A ) all_Sesquiterp_synthase.pdf and ( B ) MGG_04631T0.pdf . The figure 4A shows the most-likely domain architecture assigned to the protein MGG_04631T0 (found in all_Sesquiterp_synthase.pdf ) which is composed of only one domain: the sesquiterpene domain. The figure 4B shows all the domains that matched the protein sequence during the annotation step. We can see in this representation that both the sesquiterpene domain and the fusicocadiene domain matched the protein sequence. Only the sesquiterpene domain has been retained in the most-likely domain architecture based on its most favorable i-evalue and thus made the protein assigned as an Sesquiterp_synthase.","title":"The protein_ID.pdf file"},{"location":"psd_usage.html#the-protein_idxml-file","text":"The protein_ID.xml file contains the main information about the protein. An example of the content of this xml file is shown below for the protein MGG_04631T0: <protein> <id>MGG_04631T0</id> <sequence>MADRTCVTLPDMFRGFIVQEPKVNKHYEAVKPVSEKWLARICAFSPMMQKRVGACDFSYFCSIAAPEAPIHKLRTMCDWGNWVFPFDDMFDSGDLRSDLIVTRHVLDSLLADMKGHKFRGLKIPVVLAHDDIYRRLSEVETKNPSISGVQRRFARAMELYALGVAQHVQDFTESGLPCPQEMLETRRLSVGVAPLYHLVEYAHSIRLPDEVFEDPAIQTLERLGADMVIMSNDMLSYQKEEASTNNEGCPFNMVAACRMSGQSAQEAFDTVGALLEESYYEWEETMRQVPARGGDVERDVQRYIKGIQDVVQANITWSFRSKRYLGVHAPEVRRTKKFDVMTHPPYLDKDMAELR</sequence> <sequence_length>356</sequence_length> <class_name>Sesquiterp_synthase</class_name> <most_likely_architecture> <domain name=\"sesquiterpene\"> <c-evalue>2e-36</c-evalue> <i-evalue>3.3e-33</i-evalue> <score>114.4</score> <start>4</start> <end>333</end> <domain_length>330</domain_length> </domain> </most_likely_architecture> <other_matching_domains> <domain name=\"fusicocadiene\"> <c-evalue>7.9e-06</c-evalue> <i-evalue>0.0093</i-evalue> <score>13.5</score> <start>43</start> <end>343</end> <domain_length>301</domain_length> </domain> </other_matching_domains> </protein> Please note that if domains matched the protein sequence during the annotation step but don't belong to the most-likely architecture, those domains will be listed in the xml file under the tag <other_matching_domains> .","title":"The protein_ID.xml file"}]}